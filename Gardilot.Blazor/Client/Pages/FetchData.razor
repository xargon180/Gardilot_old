@page "/fetchdata"
@using Blazor.Fluxor
@using Store.FetchData
@inject IDispatcher Dispatcher
@inject IState<FetchDataState> FetchDataState
@inherits Blazor.Fluxor.Components.FluxorComponent

<h1>Weather forecast</h1>

@if (FetchDataState.Value.ErrorMessage != null)
{
    <h1>Error</h1>
    <p>@FetchDataState.Value.ErrorMessage</p>
}

<p>This page <strong>has</strong> been Fluxorized</p>

<p>This component demonstrates fetching data from the server.</p>

@if (FetchDataState.Value.IsLoading)
{
    <p><em>Loading...</em></p>
}

@if (FetchDataState.Value.Forecasts != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in FetchDataState.Value.Forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Dispatcher.Dispatch(new GetForecastDataAction());
    }
}
